package com.proa.app.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.proa.app.entities.Client;
import com.proa.app.exceptions.ClientNotFoundException;
import com.proa.app.services.IService;

//Anotación que indica que esta clase es un controlador REST, lo que permite manejar solicitudes HTTP.
//El controlador manejará solicitudes bajo la ruta "/client".

@RestController
@RequestMapping("/client") //http://ip:port/client
public class MicroserviceControler {
	
	// Creación de un logger para registrar mensajes de error, información o depuración.
	private static final Logger LOGGER=LoggerFactory.getLogger(MicroserviceControler.class);
	
	
	
	// Inyeccion automatica del servicio (interfaz IService) que manejará la lógica de negocio.
	@Autowired
	private IService service;
	
   		
	// Método para insertar un cliente. Recibe un objeto de tipo Client y devuelve una respuesta HTTP.
	public ResponseEntity<String> insert(Client c){
		try {
			// Si la inserción del cliente es exitosa, devuelve una respuesta con estado HTTP 201 (CREATED)
            // y el mensaje "insertado".
			if (service.insert(c))
			{
				 // En caso de error durante la inserción, se registra el error en el log.
				return new ResponseEntity<>("insertado",HttpStatus.CREATED);
			}
		}catch (Exception ex) {
			
			 // Si algo sale mal, se devuelve una respuesta con estado HTTP 500 (INTERNAL_SERVER_ERROR) 
	        // y el mensaje "error".
			LOGGER.error("ERROR INSERT{}",ex.getMessage());
		}
	
		return new ResponseEntity<>("error",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	// Método para obtener todos los clientes. Se mapea a una solicitud GET.
    // Retorna una lista de clientes con estado HTTP 200 (OK).
	@GetMapping
	public ResponseEntity<List<Client>> selectAll(){

		// Llama al método selectAll del servicio para obtener la lista de clientes.
		return new ResponseEntity<>(service.selectAll(), HttpStatus.OK);
	}
	
	@PutMapping
	public ResponseEntity<String> update(@RequestBody Client c){
		try {
			
			if(service.update(c))
				return new ResponseEntity<>("actualizado",HttpStatus.OK);
			
		} catch (ClientNotFoundException ex) {
			LOGGER.info(ex.getMessage());
			return new ResponseEntity<>("cliente no existe", HttpStatus.NOT_FOUND);
			
		}catch(Exception ex) {
			LOGGER.error("ERROR UPDATE {}", ex.getMessage());	
		}
		return null;
	}
	
}
